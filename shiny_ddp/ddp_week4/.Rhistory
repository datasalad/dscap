size = 2, col = "red")
g = g + stat_function(fun=dnorm, geom = "line",
args = list(mean = mua, sd = sigma / sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma / sqrt(n)
g = g + geom_vline(xintercept=xitc, size = 3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
)
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1, initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05)
)
)
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(0.95)
z
z
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z, mean=32, sd=1, lower.tail = FALSE)
pnorm(30+z, mean=32, sd=2, lower.tail = FALSE)
pnorm(30+z^2, mean=32, sd=2, lower.tail = FALSE)
pnorm(30+z*22, mean=32, sd=2, lower.tail = FALSE)
pnorm(30+z*2, mean=32, sd=2, lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2 , sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100 , sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26 , sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 27 , sd=1, type = "one.sample", alt = "one.sided")$delta
power <- pnorm(10 + qnorm(.95) * .4, mean = 11, sd = .4, lower.tail = FALSE
)
power
library(swirl)
swirl()
1/6 ; 6
1/6 * 6
sum(1:6)
sum(1:6)/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
median(sh)
sam <- sample(fh,nh*B,replace=TRUE)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
meds <- apply(resam, 1, median)
meds <- apply(resam, 1, median)
median(meds)-median(fh)
sd(meds)
sd(meds)
sd(resampledMedians)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
group
testStat
obs <- testStat(BCcounts, group)
obs
Bdata$count-Cdata$count
mean(Bdata$count)-mean(Cdata$count)
sample(group)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms > obs
mean(perms>obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i)
| testStat(DEcounts, sample(group)))
mean(perms>obs)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
w1 <- c(140, 138, 150, 148, 135)
w2 <- c(132, 135, 151, 146, 130)
var (w1)
var(w2)
t.test(w1, w2, paired = TRUE, var.equal = FALSE)
t.test(w1, w2, paired = TRUE, var.equal = FALSE)$p
t.test(w1, w2, paired = TRUE, var.equal = FALSE)$p.val
round(t.test(w1, w2, paired = TRUE, var.equal = FALSE)$p.val, 3)
round(t.test(w2, w1, paired = TRUE, var.equal = FALSE)$p.val, 3)
round(t.test(w2-w1, paired = TRUE, var.equal = FALSE)$p.val, 3)
round(t.test(w2, w1, paired = TRUE, var.equal = FALSE)$p.val, 3)
m <- 1100
c <- 30
n <- 9
m + c(-1, 1) * qt(0.975, n -1) * s/sqrt(n)
s <- 30
m + c(-1, 1) * qt(0.975, n -1) * s/sqrt(n)
round(m + c(-1, 1) * qt(0.975, n -1) * s/sqrt(n))
pt(3/4, 3)
pt(3/4, 3, lower.tail = FALSE)
pt(3/4, 3, lower.tail = TRUE)
c <- c(1,1,1,0)
p <- c(1, 0, 0, 0)
t.test(c,p, alternative = "one.sided", paired = FALSE)
t.test(c,p, alternative = "one.sided")
t.test(c,p)
pnorm(3/4)
pnorm(3/4, lower.tail = F)
pnorm(3/4, lower.tail = T)
qnorm(3/4)
pnorm(0.6744898, lower.tail = T)
pt(3,4)
pt(3,4, lower.tail = F)
pbinom(2, size = 4, prob = 0.5, lower.tail = FALSE)
pt(10, df = 1787)
ppois(1787, lambda = 10, lower.tail = FALSE)
ppois(10, lambda = 1787, lower.tail = FALSE)
ppois(10, lambda = 1787, lower.tail = T)
ppois(1787, lambda = 10, lower.tail = T)
pt(10, 1787)
pt(10, 1787, lower.tail = F)
pt(10, 1787, lower.tail = T)
10/1787
(10-1)/100
ppois(0.09, 0.05, lower.tail = FALSE)
1/100
10/1787
10/1787 > 1/100
10/1787 < 1/100
ppois(177, 1, lower.tail = FALSE)
ppois(177, 10, lower.tail = FALSE)
ppois(9, 5, lower.tail = FALSE)
?ppois
ppois(100, 1787, lower.tail = FALSE)
ppois(100, 1787*10, lower.tail = FALSE)
ppois(10, 1787*1/100)
(1/100)*10
1787*1/100
se <- sqrt((1.5^2*8+1.8^2*8)/16 * (1/9 +1/9))
z <- (-3+1) / se
pvalue <- pnorm(z) * 2
pvalue
pvalue > 0.10
pvalue < 0.01
pvalue <  0.10 & pvalue > 0.05
pvalue < 0.05 & pvalue > 0.01
binom.test(x=3, n=4, alt="greater")
binom.test(x=3, n=4)
binom.test(x=2, n=4)
binom.test(x=3, n=4)
pooled.var = (1.5^2*8 + 1.8^2*8)/(9+9-2)
test_stat <- -3-1/sqrt(pooled.var/9)
pt(test_stat,8)
pt(test_stat,8) < .01
library(datasets)
data(ToothGrowth)
t <- ToothGrowth
t
?t
?ToothGrowth
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
?t.test
- t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
aa <-- t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
aa <- t.test(len ~ supp, paired = FALSE, var.equal = FALSE, data = ToothGrowth)
aa$p.value < 0.05
aa$p.value > 0.05
aa$alternative
aa$parameter
aa$estimate
aa$null.value
aa
t.test(len ~ supp, data = filter(ToothGrowth, dose == 0.5), paired = FALSE)
bb <-- t.test(len ~ supp, data = filter(ToothGrowth, dose == 0.5), paired = FALSE)
bb <- t.test(len ~ supp, data = filter(ToothGrowth, dose == 0.5), paired = FALSE)
bb$statistic
bb$p.value < 0.05
bb$null.value
bb$conf.int
bb <- t.test(len ~ supp, data = filter(ToothGrowth, dose == 1), paired = FALSE)
bb
bb <- t.test(len ~ supp, data = filter(ToothGrowth, dose == 2), paired = FALSE)
bb
cor
library(swirl)
install_from_swirl("Regression Models")
swirl()
library(UsingR)
data("father.son")
library(ggplot2)
g <- ggplot(father.son, aes(x = father.son$fheight, y = father.son$sheight))
g <- g + geom_boxplot()
g
g <- ggplot(father.son, aes(x = father.son$fheight, y = father.son$sheight))
g
g + geom_point()
g + geom_point()
g + geom_point() + geom_count()
g + geom_point() + geom_abline(lm( father.son$fheight ))
g + geom_point() + geom_abline(lm( father.son$fheight ~ father.son$sheight))
lm( father.son$fheight ~ father.son$sheight)
g + geom_point() + geom_abline(slope = 34)
g + geom_point() + geom_abline(slope = 34)
g + geom_point() + geom_abline(slope = 0)
g + geom_point()
g + geom_point()  + geom_density()
g + geom_point()
g
g + geom_point()
g <- ggplot(father.son, aes(y = father.son$fheight, x = father.son$sheight))
g
g + geom_point()
g <- ggplot(father.son, aes(y = log10(father.son$fheight), x = father.son$sheight))
g
g+ geom_point()
log10(father.son$fheight)
g <- ggplot(father.son, aes(y = log10(father.son$fheight), x = log10(father.son$sheight))
g+ geom_point()
g <- ggplot(father.son, aes(y = log10(father.son$fheight), x = log10(father.son$sheight)))
g + geom_point()
g <- ggplot(father.son, aes(y = log(father.son$fheight), x = log(father.son$sheight)))
g + geom_point()
g <- ggplot(father.son, aes(y = log(father.son$fheight, base = 100), x = log(father.son$sheight, base = 100)))
g + geom_point()
range(father.son$fheight)
range(father.son$sheight)
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4)
)
plot(jitter(child,4) ~ parent,galton)
regline <- lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
0
makeH = function(x) x %*% solve(t(x) %*% x) %*% t(x)
y = mtcars$mpg
x = cbind(1, mtcars$hp, mtcars$wt)
solve(t(x) %*% x) %*% t(x) %*% y
?solve
x
t(x)
?t
setdiff
x
y
setdiff(x,y)
ls
ls()
getwd()
ls()
getwd()
library(swirl)
swirl()
swirl()
ones <- rep(1, 928)
lm(child ~ ones + parent - 1,galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume  ~ Girth + Height + Constant - 1, treeas)
fit <- lm(Volume  ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
?swiss
plot(swiss)
install.packages("ggally")
install.packages("GGally")
ggpairs(swiss)
library(GGally)
ggpairs(swiss)
ggpairs(swiss)
ggpairs(swiss) + geom_smooth()
library(ggplot2)
ggpairs(swiss) + geom_smooth()
ggpairs(swiss, continuous = "smooth")
ggpairs(swiss,  lower = list(continuous = "smooth"))
ggpairs(swiss)
ggpairs(swiss)
plot(swiss$Fertility)
ggpairs(swiss)
plot(swiss$Fertility)
plot(swiss)
data(psychademic)
psychademic
plot(psychademic)
summary(psychademic)
data(diamonds, package="ggplot2")
diamonds.samp <- diamonds[sample(1:dim(diamonds)[1], 1000), ]
pm <- ggpairs(
diamonds.samp[, 1:5],
mapping = ggplot2::aes(color = cut),
upper = list(continuous = wrap("density", alpha = 0.5), combo = "box_no_facet"),
lower = list(continuous = wrap("points", alpha = 0.3), combo = wrap("dot_no_facet", alpha = 0.4)),
title = "Diamonds"
)
pm
diamonds.samp
sample(1:dim(diamonds)[1], 1000)
diamonds
?diamonds
data("diamonds")
?diamonds
data(diamonds, package="base")
library(GGally)
ggpairs(mtcars)
exp <- rexp(n = 10000)
exp
exp1 <- dexp(n = 10000)
exp1 <- dexp(x = 10000, rate = 0.2)
plot(exp, exp)
plot(exp, exp1)
exp1 <- dexp(exp)
plot(exp, exp1)
exp1 <- dexp(x = 10000, rate = 1)
exp <- rexp(n = 10000, rate = 1)
exp1 <- dexp(exp)
plot(exp, exp1)
exp <- rexp(n = 10000, rate = 1/100)
exp1 <- dexp(exp)
plot(exp, exp1)
?dexp
exp1 <- qexp(exp)
plot(exp, exp1)
exp <- rexp(n = 10000, rate = 1)
exp1 <- qexp(exp)
plot(exp, exp1)
library(ggplot2)
g <- ggplot(aes(x = exp, y = exp1))
g <- ggplot(data.frame(exp = exp, exp1 = exp1), aes(x = exp, y = exp1))
g + geom_point()
g + geom_point() + ggtitle("Kolya's nakidon probability")
g + geom_point() + ggtitle("Kolya's nakidon probability") + xlab("Time, hours") + ylab("Probability")
g + geom_point() + ggtitle("Kolya's nakidon probability") + xlab("Time, hours") + ylab("Probability") + geom_smooth(method = "lm")
g + geom_point() + ggtitle("Kolya's nakidon probability") + xlab("Time, hours") + ylab("Probability") + geom_smooth()
g + geom_point(col = variable) + ggtitle("Kolya's nakidon probability") + xlab("Time, hours") + ylab("Probability") + geom_smooth()
exp <- rexp(n = 10000, rate = 10)
exp1 <- qexp(exp)
g <- ggplot(data.frame(exp = exp, exp1 = exp1), aes(x = exp, y = exp1))
g + geom_point(col = variable) + ggtitle("Kolya's nakidon probability") + xlab("Time, hours") + ylab("Probability") + geom_smooth()
g + geom_point() + ggtitle("Kolya's nakidon probability") + xlab("Time, hours") + ylab("Probability") + geom_smooth()
ggplot(diamonds, aes(x=carat, y=price, color=cut)) + geom_point() + geom_smooth() +theme_bw() + labs(title="bw Theme")
names(diamonds)
names(diamonds$cut)
d <- diamonds
d
library(dplyr)
d <- mutate(d, DrinkType=cut)
d
d <- mutate(d, cut == ""Good" ? DrinkType="Pivko")
d <- mutate(d, crinkType=ifelse(cut == "Premium", "Pivko", "Vodyara"))
d
ggplot(d, aes(x=carat, y=price, color=DrinkType)) + geom_point() + geom_smooth() +theme_bw() + labs(title="bw Theme")
d <- mutate(d, DrinkType=ifelse(cut == "Premium", "Pivko", "Vodyara"))
ggplot(d, aes(x=carat, y=price, color=DrinkType)) + geom_point() + geom_smooth() +theme_bw() + labs(title="bw Theme")
ggplot(d, aes(x=carat, y=price, color=DrinkType)) + geom_point() + geom_smooth() +theme_bw() + labs(title="Kolya's Nakidon simulations")
ggplot(d, aes(x=carat, y=price, color=DrinkType)) + geom_point() + geom_smooth() +theme_bw() + labs(title="Kolya's Nakidon simulations") + xlab("Time, min") + ylab("Probability")
d <- mutate(d, crinkType=ifelse(cut == "Premium", "Pivko", "Vinishko"))
ggplot(d, aes(x=carat, y=price, color=DrinkType)) + geom_point() + geom_smooth() +theme_bw() + labs(title="Kolya's Nakidon simulations") + xlab("Time, min") + ylab("Probability")
d <- mutate(d, DrinkType=ifelse(cut == "Premium", "Pivko", "Vinishko"))
ggplot(d, aes(x=carat, y=price, color=DrinkType)) + geom_point() + geom_smooth() +theme_bw() + labs(title="Kolya's Nakidon simulations") + xlab("Time, min") + ylab("Probability")
ggplot(d, aes(x=carat, y=price, color=DrinkType)) + geom_point() + geom_smooth() +theme_bw() + labs(title="K simulations") + xlab("Time, min") + ylab("Probability")
ggplot(d, aes(x=carat, y=price, color=carat)) + geom_point() + geom_smooth() +theme_bw() + labs(title="K simulations") + xlab("Time, min") + ylab("Probability")
head(d)
head(d)
install.packages("shiny")
install.packages("shiny")
shiny::runApp('Desktop/shiny/Test')
?faithful
runApp('Desktop/shiny/Test')
runApp('Desktop/shiny/Test')
?h3
install.packages("miniUI")
data(fruits)
install.packages("googleVis")
library("googleVis")
fr <- Fruits
fr
class(fr)
plot(fr)
m <- step(lm(Profit ~ ., fr))
m
summary(m)
m <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
m
print(m)
plot(m)
plot(m)
?gvisMotionChart
plot(m)
demo(googleVis)
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(
lat = c(50.0057),
lng = c(36.2288)
)
map <- leaflet(df) %>%
addTiles()
map
df <- data.frame(
lat = c(50.0057),
lng = c(36.2288)
)
map <- leaflet(df) %>%
addTiles(df)
map
df <- data.frame(
lat = c(50.0057),
lng = c(36.2288)
)
map <- df %>%
leaflet() %>%
addTiles()
map
library(leaflet)
df <- data.frame(
lat = c(39),
lng = c(-76)
)
map <- df %>%
leaflet() %>%
addTiles()
map
library(leaflet)
df <- data.frame(
lat = c(39),
lng = c(-76)
)
df %>%
leaflet() %>%
addTiles()
df <- data.frame(
lat = c(39.29),
lng = c(-76.59)
)
df %>%
leaflet() %>%
addTiles()
addTiles()
df
df %>% leaflet() %>% addTiles()
map <- leaflet(df)
map <- addTiles(map)
map
map <- addMarkers(df)
setwd("~/Desktop/shiny/ddp_week4")
library(rsconnect)
deployApp()
install.packages(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
deployApp()
deployApp()
library(rsconnect)
setwd("~/Desktop/shiny/ddp_week4")
deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
deployApp()
?mtcars
